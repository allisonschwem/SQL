#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 


#How many many unique orders were placed in January? In other words, how many distinct order ids do we have?

SELECT 
count(Distinct orderID) 
FROM BIT_DB.JanSales
where orderID <> 'Order ID' 
and length(orderid) = 6;

--In this circumstance, there was incomplete data in the table where instead of having a 6 digit order id, it would say "Order ID."
      --In the real world, we would most likely want to pull the incomplete data specifically to fix it and identify weak points in processes.
      --Other than running a query to specifically pull up these instances, I would consider using a CASE to flag these outliers.
              CASE 
              WHEN orderID= 'Order ID' THEN 'Order ID Error'
              ELSE 'Order Submitted'
              END;
--Additionally, my instructions were to specifically only use order ids with 6 digits and consider any more to be incorrect.
      --In the real world, this may not be the case. A different format for order id could mean any number of things like variation of vendor, 
        a CS corrected/altered order, or a need to expand from 6 to 7 digits to ensure unique order ids in the future.
          --If I knew there were always a minimum of 6 digits in an order id, I would change the =6 to >=6
          --Alternatively, I could run a query to isolate order ids over 6 digits using >6 to be reviewed for errors.

#How many of those orders were for an iPhone?

Select
orderID
,count(Product) 
FROM BIT_DB.JanSales
where orderID <> 'Order ID' 
and length(orderid) = 6
and Product = 'iPhone';

#Select the customer account numbers for all the orders that were placed in February.

Select
distinct acctnum
From BIT_DB.customers cust
inner join BIT_DB.FebSales feb
on feb.orderid = cust.order_id
where orderID <> 'Order ID' 
and length(orderid) = 6;

#Which product was the cheapest one sold in January, and what was the price?

Select 
Product
,price
From BIT_DB.JanSales
Where Product <> 'Product'
and length(Product) >1
group by Product
order by price asc
Limit 1;

--OR

Select distinct Product, price
From BIT_DB.JanSales
Where price in (SELECT min(price) From BIT_DB.JanSales);

--OR in the case where there may be more than 1 product at the cheapest price:

Select 
Product
,price
From BIT_DB.JanSales
Where Product <> 'Product'
and length(Product) >1
group by Product
order by price asc;

#What is the total revenue for each product sold in January?

Select 
Product
,sum(price) * count(quantity) as Revenue
From BIT_DB.JanSales
Where Product <> 'Product'
and length(Product) >1
group by Product
order by price asc;

--OR to clean up extra decimal digits

Select 
Product
,Round(sum(price) * count(quantity),2) as Revenue
From BIT_DB.JanSales
Where Product <> 'Product'
and length(Product) >1
group by Product
order by price asc;

#How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

--For the average spent for each of those customers individually:

Select
distinct(acctnum) Customer_Account
,Avg(Price) Average_Spent
From BIT_DB.customers cust
join BIT_DB.FebSales feb
on feb.orderid = cust.order_id
where feb.quantity>2
and length(orderid) = 6
and orderid <> 'Order ID'
group by acctnum

--For average spent by those customers as a whole:

SELECT
count(distinct acctnum) Customer_Account,
avg(quantity*price) Average_Spent
From BIT_DB.FebSales feb
Join BIT_DB.customers cust
on FEB.orderid=cust.order_id
Where feb.Quantity>2
and length(orderid) = 6
and orderid <> 'Order ID';

#List all the products sold in Los Angeles in February, and include how many of each were sold.

SELECT distinct Product
, COUNT(product) Quantity
FROM BIT_DB.FebSales 
WHERE location like '%Los Angeles%'
Group by Product;

--In this excrcise, the above is listed as the correct answer as we only want the orders for 'Los Angeles' specifically.
    --In the real world, we know that the abreviation 'LA' can be used in an address.
    --To ensure I pull all relevent data, I would also include 'LA' in my query. 
    
SELECT distinct Product
, COUNT(product) Quantity
FROM BIT_DB.FebSales 
WHERE location like '%Los Angeles%' or '%LA%'
Group by Product;

#Which locations in New York received at least 3 orders in January, and how many orders did they each receive? 

--For orders in New York the city:

SELECT 
distinct location as Location
, count(orderID) 
FROM BIT_DB.JanSales
where location like '%New York%'
and orderID <> 'Order ID' 
and length(orderid) = 6
Group by location
Having count(orderID) >= 3

--For order in New York the state:

SELECT 
distinct location as Location
, count(orderID) 
FROM BIT_DB.JanSales
where location like '%NY%'
and orderID <> 'Order ID' 
and length(orderid) = 6
Group by location
Having count(orderID) >= 3

#How many of each type of headphone were sold in February?

SELECT 
Product
, sum(quantity) Quantity
FROM BIT_DB.FebSales 
where product like '%headphone%'
Group by Product;


#What was the average amount spent per account in February? 

--for each individual account:

SELECT
acctnum Customer_Account,
avg(quantity*price) Average_Spent
From BIT_DB.FebSales feb
Join BIT_DB.customers cust
on FEB.orderid=cust.order_id
Where length(orderid) = 6
and orderid <> 'Order ID'
group by acctnum;

--For all accounts as a whole:

SELECT
avg(quantity*price) Average_Spent
From BIT_DB.FebSales feb
Join BIT_DB.customers cust
on FEB.orderid=cust.order_id
Where length(orderid) = 6
and orderid <> 'Order ID';


#What was the average quantity of products purchased per account in February? 

--for each individual account:

SELECT
acctnum Customer_Account,
avg(quantity) Average_Quantity
From BIT_DB.FebSales feb
Join BIT_DB.customers cust
on FEB.orderid=cust.order_id
Where length(orderid) = 6
and orderid <> 'Order ID'
group by acctnum;

--For all accounts as a whole:

SELECT
sum(quantity)/count(cust.acctnum)
From BIT_DB.FebSales feb
Join BIT_DB.customers cust
on FEB.orderid=cust.order_id
Where length(orderid) = 6
and orderid <> 'Order ID';


#Which product brought in the most revenue in January and how much revenue did it bring in total?

Select
product
,sum(quantity*price) as Total_Revenue
From BIT_DB.JanSales
Where length(orderid) = 6
and orderid <> 'Order ID'
group by product
order by Total_Revenue desc
limit 1;

--OR if there could be multiple products that brought in the same/similar revenue:

Select
product
,sum(quantity*price) as Total_Revenue
From BIT_DB.JanSales
Where length(orderid) = 6
and orderid <> 'Order ID'
group by product
order by Total_Revenue desc
limit 5;
